generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  perfil        Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Cliente {
  id           String        @id @default(uuid())
  name         String
  address      String?
  phone        String?
  imageUrl     String?
  CPFCNPJ      Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  veiculos     Veiculo[]
  agendamentos Agendamento[]
}

model Veiculo {
  id           String                    @id @default(uuid())
  modelo       String
  fabricante   String?
  imageUrl     String?
  placa        String                    @unique
  cor          String?
  numEixos     Int
  clienteId    String
  cliente      Cliente                   @relation(fields: [clienteId], references: [id])
  agendamentos AgendamentosPorVeiculos[]
}

model Agendamento {
  id               String                    @id @default(uuid())
  date             DateTime
  serviceCompleted DateTime?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  clienteId        String
  cliente          Cliente                   @relation(fields: [clienteId], references: [id])
  veiculos         AgendamentosPorVeiculos[]
}

model AgendamentosPorVeiculos {
  veiculoId     String
  veiculo       Veiculo     @relation(fields: [veiculoId], references: [id])
  agendamentoId String
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id])

  @@id([veiculoId, agendamentoId])
}
